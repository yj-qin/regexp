package "yj-qin/regexp"

// Values
fn captures(MatchResult) -> Array[String]

fn compile(String) -> RegExp!

fn matches(RegExp, String, start~ : Int = .., end~ : Int = ..) -> MatchResult

fn named_captures(MatchResult) -> Map[String, String]

fn pattern(RegExp) -> String

fn success(MatchResult) -> Bool

// Types and methods
type MatchResult
impl MatchResult {
  captures(Self) -> Array[String]
  named_captures(Self) -> Map[String, String]
  success(Self) -> Bool
}
impl Show for MatchResult

pub(all) type! ParseError {
  InternalParserError
  UnmatchedGroupBegin(pos~ : Int)
  UnmatchedGroupEnd(pos~ : Int)
  UnmatchedGroupName(pos~ : Int)
  EmptyGroupName(pos~ : Int)
  EmptyGroup(pos~ : Int)
  UnmatchedCharClassEnd(pos~ : Int)
  UnspecifiedLoopTarget(pos~ : Int)
  InvalidLoop(pos~ : Int)
  LoopCountOutOfRange(pos~ : Int)
  LoopMaxCountSmallerThanMinCount(pos~ : Int)
  EndPatternAtEscape(pos~ : Int)
  ClassMissingBracket(pos~ : Int)
  GroupMissingParen(pos~ : Int)
}
impl Eq for ParseError
impl Show for ParseError

type RegExp
impl RegExp {
  matches(Self, String, start~ : Int = .., end~ : Int = ..) -> MatchResult
  pattern(Self) -> String
}

// Type aliases

// Traits

