package yj-qin/regexp

// Values
fn compile(String) -> RegExp!

// Types and methods
type Match
impl Match {
  capture(Self, Int) -> String?
  named(Self, String) -> String?
  success(Self) -> Bool
  to_string(Self) -> String
}

pub type! ParseError {
  InternalParserError
  UnmatchedGroupBegin(Int)
  UnmatchedGroupEnd(Int)
  UnmatchedGroupName(Int)
  EmptyGroupName(Int)
  EmptyGroup(Int)
  UnmatchedCharClassEnd(Int)
  UnspecifiedLoopTarget(Int)
  InvalidLoop(Int)
  LoopCountOutOfRange(Int)
  LoopMaxCountSmallerThanMinCount(Int)
  EndPatternAtEscape(Int)
  ClassMissingBracket(Int)
  GroupMissingParen(Int)
}
impl ParseError {
  op_equal(Self, Self) -> Bool
}

type RegExp
impl RegExp {
  matches(Self, String, ~start : Int = .., ~end : Int = ..) -> Match
  pattern(Self) -> String
}

// Type aliases

// Traits

// Extension Methods
impl Show for Match

